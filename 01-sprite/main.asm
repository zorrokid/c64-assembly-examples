	; Start memory location for program
*	=$0801
	
	; Kernal function to clear the screen
	jsr $e544

	; Set sprite #0 memory pointer

	; We locate Sprite data starting from $2000 (see sprdata)
	; The memory location passed to sprite data pointer is
	; memory address divided by 64 
	; since $2000 is 8192 in decimal:
	; 8192 / 64 = 128 ($80) 
	; so we set sprite #0 memory pointer to $80.

	lda #$80
	sta $07f8

	lda #$81
	sta $07f9

	; enable sprite #0 and #1 (00000011)
	lda #03
	sta $d015

	; set hires mode for all sprites
	lda #$00
	sta $d01c

	; set sprite #0 and #1 color to white
	lda #$01
	sta $d027
	sta $d028

	; set sprite #0 location
	lda #$40
	; x-location
	sta $d000
	; y-location
	sta $d001

	; set sprite #1 location
	lda #$a0
	; x-location
	sta $d002
	; y-location
	sta $d003

	; Wait loop
wait: 
	jmp wait

; sprite is 24 bits X 21 bits (63 bytes) 

;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00
;00000000 11111111 00000000 => $00 $FF $00

	; sprite data pointer value must be set to a memory 
	; address dividable with 64 so here we locate sprite data
	; to $2000 which is 8192 in decimal

*	= $2000 
sprdata	
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00,$ff,$00
	!byte $00 ; fill in extra byte for 64 byte block

;00000000 00000000 00000000 => $00 $00 $00
;00000000 00000000 00000000 => $00 $00 $00
;00000000 00000000 00000000 => $00 $00 $00
;00000000 00000000 00000000 => $00 $00 $00
;00000000 00000000 00000000 => $00 $00 $00
;00000000 00000000 00000000 => $00 $00 $00
;00000000 00000000 00000000 => $00 $00 $00
;00000000 00011000 00000000 => $00 $18 $00
;00000000 01111110 00000000 => $00 $7e $00
;00000001 11111111 10000000 => $01 $FF $80
;00000001 11111111 10000000 => $03 $FF $C0
;00000001 11111111 10000000 => $03 $FF $C0
;00000001 11111111 10000000 => $01 $FF $80
;00000000 01111110 00000000 => $00 $FF $00
;00000000 00011000 00000000 => $00 $18 $00
;00000000 00000000 00000000 => $00 $00 $00
;00000000 00000000 00000000 => $00 $00 $00
;00000000 00000000 00000000 => $00 $00 $00
;00000000 00000000 00000000 => $00 $00 $00
;00000000 00000000 00000000 => $00 $00 $00
;00000000 00000000 00000000 => $00 $00 $00

	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00,$7e,$00
	!byte $01,$FF,$80
	!byte $01,$FF,$80
	!byte $01,$FF,$80
	!byte $01,$FF,$80
	!byte $00,$7e,$00
	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00,$00,$00
	!byte $00
